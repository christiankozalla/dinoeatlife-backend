generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  users     User[]
  recipes   Recipe[]
  ingredients Ingredient[]
  //meals     Meal[]
  isDeleted Boolean  @default(false)
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  household   Household @relation(fields: [householdId], references: [id])
  householdId Int
  Profile     Profile?
  recipes     Recipe[]
  // tokens      Token[]
  isDeleted   Boolean   @default(false)
  //Meal        Meal[]
}

// A user can have one profile
// The Profile holds *public* information
model Profile {
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
  name        String?    @db.VarChar(255)
  bio         String?    @db.VarChar(2000)
  city        String?    @db.VarChar(30)
  social      Json?
}

// model Token {
//   id         Int       @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   type       TokenType
//   emailToken String?   @unique // Only used for short lived email tokens
//   valid      Boolean   @default(true)
//   expiration DateTime

//   // Relation fields
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

model Recipe {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  duration    Int
  description String
  ingredients Ingredient[]
  user        User        @relation(fields: [creator], references: [id])
  creator     Int
  household   Household   @relation(fields: [householdId], references: [id])
  householdId Int
  isDeleted   Boolean      @default(false)
}

// A meal is basically an Instance of a recipe - with time and date
// model Meal {
//   id          Int        @id @default(autoincrement())
//   name        String     @db.VarChar(255)
//   user        User       @relation(fields: [creator], references: [id])
//   creator     Int
//   date        DateTime
//   household   Household? @relation(fields: [householdId], references: [id])
//   householdId Int?
//   isDeleted   Boolean    @default(false)
// }

model Ingredient {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  unit      String
  recipes   Recipe[]
  household   Household @relation(fields: [householdId], references: [id])
  householdId Int
  isDeleted Boolean @default(false)
}

enum TokenType {
  ACCESS // used as a short lived token sent to the user - strored in memory
  REFRESH
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Home {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  users       User[]
  recipes     Recipe[]
  ingredients Ingredient[]
  //meals     Meal[]
  isDeleted   Boolean      @default(false)
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String
  home       Home        @relation(fields: [homeId], references: [id])
  homeId     Int
  profile    Profile?
  recipes    Recipe[]
  posts      Post[]
  token      Token?
  emailToken EmailToken?
  isVerfied  Boolean     @default(false) // Will be switched to true, if user validates email
  isDeleted  Boolean     @default(false)
  //Meal        Meal[]
}

// A user can have one profile
// The Profile holds *public* information
model Profile {
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  name   String? @db.VarChar(255)
  bio    String? @db.VarChar(2000)
  city   String? @db.VarChar(30)
  social Json?
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String
  // Relation fields
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model Recipe {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  duration    Int
  description String
  ingredients Ingredient[]
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  home        Home         @relation(fields: [homeId], references: [id])
  homeId      Int
  isDeleted   Boolean      @default(false)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

// A meal is basically an Instance of a recipe - with time and date
// model Meal {
//   id          Int        @id @default(autoincrement())
//   name        String     @db.VarChar(255)
//   user        User       @relation(fields: [creator], references: [id])
//   creator     Int
//   date        DateTime
//   home   Home? @relation(fields: [homeId], references: [id])
//   homeId Int?
//   isDeleted   Boolean    @default(false)
// }

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  unit      String
  recipes   Recipe[]
  home      Home     @relation(fields: [homeId], references: [id])
  homeId    Int
  isDeleted Boolean  @default(false)
}

model EmailToken {
  user       User   @relation(fields: [userId], references: [id])
  userId     Int    @unique
  emailToken String
}
